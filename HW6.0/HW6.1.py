import numpy as npimport pandas as pdimport seaborn as snsimport matplotlib.pyplot as pltfrom keras import modelsfrom keras import layersfrom keras import lossesfrom keras.callbacks import CSVLogger#GET DATASETfrom keras.datasets import mnist(X, Y), (test_images, test_labels) = mnist.load_data()#NORMALIZE AND RESHAPEX=X/np.max(X) X=X.reshape(60000,28*28); # #MODELn_bottleneck=3# # SHALLOW# model = models.Sequential()# model.add(layers.Dense(n_bottleneck, activation='linear', input_shape=(28 * 28,)))# model.add(layers.Dense(28*28,  activation='linear'))#DEEPERmodel = models.Sequential()NH=200model.add(layers.Dense(NH, activation='relu', input_shape=(28 * 28,)))model.add(layers.Dense(NH, activation='relu'))model.add(layers.Dense(n_bottleneck, activation='relu'))model.add(layers.Dense(NH, activation='relu'))model.add(layers.Dense(NH, activation='relu'))model.add(layers.Dense(28*28,  activation='linear'))#COMPILE AND FITmodel.compile(optimizer='rmsprop', loss='mean_squared_error')model.summary()log = CSVLogger('HW6.1_log.txt', append=True, separator=';') history = model.fit(X, X, epochs=10, batch_size=1000,validation_split=0.2, callbacks = log)epochs = range(1, len(history.history['loss']) + 1)plt.figure()plt.plot(epochs, history.history['loss'], 'bo', label='Training loss')plt.plot(epochs, history.history['val_loss'], 'b', label='Validation loss')plt.title('History AE')plt.legend()plt.savefig('HW6.1_History.png') plt.show()plt.close()#EXTRACT MIDDLE LAYER (REDUCED REPRESENTATION)from keras import Model extract = Model(model.inputs, model.layers[-2].output) # Dense(128,...)X1 = extract.predict(X)print(X1.shape)# threshold for anomaly scoresthreshold = 4*model.evaluate(X,X, batch_size = X.shape[0])threshold# =============================================================================# Anomaly Detection# =============================================================================from keras.datasets import fashion_mnist (X, Y), (test_images, test_labels) = fashion_mnist.load_data()X=X/np.max(X) X=X.reshape(60000,28*28); #PLOT ORIGINAL AND RECONSTRUCTED X1=model.predict(X) reconstruction_errors = losses.mse(X, X1)anomaly = pd.Series(reconstruction_errors) > threshold#RESHAPEX=X.reshape(60000,28,28); #print(X[0])X1=X1.reshape(60000,28,28); #print(X[0])#COMPARE ORIGINAL f, ax = plt.subplots(4,1)I1=11; I2=46ax[0].imshow(X[I1])ax[1].imshow(X1[I1])ax[2].imshow(X[I2])ax[3].imshow(X1[I2])plt.savefig('HW6.1_Reconstruct.png') plt.show()plt.close()anom_percentage = len(X[anomaly])/len(X)with open('HW6.1_log.txt', 'a') as f:    f.write('Anomaly percentage = ')    f.write(str(anom_percentage))